let selectedProducts = [];
let allProducts = [];

// ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
function addNewProduct() {
    let code = document.getElementById('new-code').value.trim();
    let name = document.getElementById('new-name').value.trim();
    let price = parseFloat(document.getElementById('new-price').value);

    if (!code || !name || isNaN(price) || price <= 0) {
        alert("–í—Å—ñ –ø–æ–ª—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!");
        return;
    }

    fetch('/add-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code, name, price })
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        loadProducts(); 
    })
    .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:', error));
}

// üü¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤
function loadProducts() {
    fetch('/products')
        .then(response => response.json())
        .then(data => {
            allProducts = data;
            renderProductTable();
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤:', error));
}

// üü¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏
function loadSelectedProducts() {
    fetch('/selected-products')
        .then(response => response.json())
        .then(data => {
            selectedProducts = data;
            renderProductTable(); 
            renderOrderText();
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É:', error));
}

// üîÑ –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤
function renderProductTable() {
    let list = document.getElementById('product');
    if (!list) return console.error("‚ùå –ï–ª–µ–º–µ–Ω—Ç #product –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");

    list.innerHTML = '';  

    if (allProducts.length === 0) {
        list.innerHTML = '<tr><td colspan="7">‚ùå –¢–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ</td></tr>';
        return;
    }
    allProducts.sort((a, b) => a.name.localeCompare(b.name));

    allProducts.forEach((product, index) => {
        let price = parseFloat(product.price);
        if (isNaN(price)) price = 0;

        let isSelected = selectedProducts.some(p => p.code === product.code);

        let row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <button onclick='toggleSelection(${index})' 
                    style="background-color: ${isSelected ? 'green' : 'white'};">
                    ${isSelected ? '‚úî' : '‚ûï'}
                </button>
            </td>
            <td>${product.code}</td>
            <td>${product.name}</td>
            <td><input type="number" value="1" min="1" id="qty-${index}"></td>
            <td>${price.toFixed(2)}</td>
            <td>
                <button onclick='editProduct(${index})'>‚úè</button>
                <button onclick='deleteProduct(${index})'>üóë</button>
            </td>
        `;
        list.appendChild(row);
    });
}

// ‚ûï –î–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏–±—Ä–∞–Ω–∏—Ö
function toggleSelection(index) {
    let product = allProducts[index];
    let quantityInput = document.getElementById(`qty-${index}`);
    let quantity = parseInt(quantityInput.value);

    if (isNaN(quantity) || quantity < 1) {
        alert("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0");
        return;
    }

    let existingIndex = selectedProducts.findIndex(p => p.code === product.code);
    if (existingIndex !== -1) {
        selectedProducts.splice(existingIndex, 1); // –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∏–π ‚Äì –≤–∏–¥–∞–ª—è—î–º–æ
    } else {
        selectedProducts.push({ code: product.code, name: product.name, quantity, price: product.price });
    }

    console.log("‚úÖ –ü–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤:", selectedProducts);

    saveSelection();
    renderProductTable();
    renderOrderText();
}


// üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
function renderOrderText() {
    let orderText = document.getElementById('order-text');
    if (!orderText) {
        console.error("‚ùå –ü–æ–ª–µ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        return;
    }

    if (selectedProducts.length === 0) {
        orderText.value = "‚ùå –ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤!";
        return;
    }

    let total = 0;
    let orderDetails = selectedProducts.map(p => {
        let itemTotal = p.quantity * p.price;
        total += itemTotal;
        return `${p.code} - ${p.name} -  ${p.quantity} —à—Ç`;
    }).join('\n');

    orderText.value = `${orderDetails}\n\nüü¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total.toFixed(2)} –≥—Ä–Ω`;
    console.log("üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ:\n", orderText.value);
}



// ‚úè –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä (–∑–º—ñ–Ω—é—î—Ç—å—Å—è –∫–æ–¥, –Ω–∞–∑–≤–∞, —Ü—ñ–Ω–∞)
function editProduct(index) {
    let product = allProducts[index];

    let newCode = prompt("üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∫–æ–¥:", product.code).trim();
    let newName = prompt("‚úè –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:", product.name).trim();
    let newPrice = parseFloat(prompt("üí∞ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É:", product.price));

    if (!newCode || !newName || isNaN(newPrice) || newPrice <= 0) {
        alert("‚ùå –î–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ!");
        return;
    }

    fetch(`/edit-product`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ oldCode: product.code, newCode, name: newName, price: newPrice })
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        loadProducts();
    })
    .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:', error));
}

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –±–∞–∑–∏
function deleteProduct(index) {
    let product = allProducts[index];

    if (!confirm(`‚ùó –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ "${product.name}"?`)) return;

    fetch(`/delete-product/${product.code}`, { method: 'DELETE' })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            loadProducts();
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:', error));
}

// üî¥ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
function saveSelection() {
    fetch('/selected-products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(selectedProducts)
    })
    .then(() => console.log("‚úÖ –í–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ!"))
    .catch(error => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É:', error));
}



// üî¥ –û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏–±—ñ—Ä
function clearSelection() {
    selectedProducts = [];

    fetch('/selected-products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify([])
    })
    .then(() => {
        renderProductTable();
        renderOrderText();
        
    })
    .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É:', error));
}

  
// üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
window.onload = function () {
    loadProducts();
    loadSelectedProducts();
    setInterval(loadSelectedProducts, 5000);
};
