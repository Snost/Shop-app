let selectedProducts = {
    eleys: [],
    grunhelm: []
};

let allProducts = {
    eleys: [],
    grunhelm: []
};

// üîÑ –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥—É
function renderProductTable(brand) {
    let list = document.getElementById(`products_${brand}`);

    list.innerHTML = '';

    if (allProducts[brand].length === 0) {
        list.innerHTML = '<tr><td colspan="7">‚ùå –¢–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ</td></tr>';
        return;
    }

    allProducts[brand].sort((a, b) => a.name.localeCompare(b.name));

    allProducts[brand].forEach((product, index) => {
        let selectedProduct = selectedProducts[brand].find(p => p.code === product.code);
        let quantity = selectedProduct ? selectedProduct.quantity : 1;

        let row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <button onclick='toggleSelection("${brand}", ${index})' 
                    style="background-color: ${selectedProduct ? 'green' : 'white'};">
                    ${selectedProduct ? '‚úî' : '‚ûï'}
                </button>
            </td>
            <td>${product.code}</td>
            <td>${product.name}</td>
            <td>
                <input type="number" value="${quantity}" min="1" 
                    id="qty-${brand}-${index}" onchange="updateQuantity('${brand}', ${index})">
            </td>
            <td>${parseFloat(product.price).toFixed(2)}</td>
            <td>
                <button onclick='editProduct("${brand}", ${index})'>‚úè</button>
                <button onclick='deleteProduct("${brand}", ${index})'>üóë</button>
            </td>
        `;
        list.appendChild(row);
    });
}

// üü¢ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –º—ñ–∂ –±—Ä–µ–Ω–¥–∞–º–∏
function showTab(brand) {
    document.querySelectorAll('.tab').forEach(tab => tab.style.display = 'none');
    document.getElementById(brand).style.display = 'block';
}

// ‚ûï –î–æ–¥–∞—Ç–∏ –∞–±–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏–±—Ä–∞–Ω–∏—Ö
function toggleSelection(brand, index) {
    let product = allProducts[brand][index];
    let quantityInput = document.getElementById(`qty-${brand}-${index}`);
    let quantity = parseInt(quantityInput.value);

    // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ –∑–∞–¥–∞–Ω–∞ –∞–±–æ –º–µ–Ω—à–µ 1, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è 0
    if (isNaN(quantity) || quantity < 1) {
        quantity = 0;
    }

    let existingProductIndex = selectedProducts[brand].findIndex(p => p.code === product.code);

    if (existingProductIndex !== -1) {
        selectedProducts[brand].splice(existingProductIndex, 1);
    } else {
        selectedProducts[brand].push({
            code: product.code,
            name: product.name,
            quantity: quantity,
            price: product.price
        });
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
    fetch(`/selected-products`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(selectedProducts)
    })
    .then(() => {
        renderProductTable(brand);
        renderOrderText(brand);
    })
    .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É:', error));
}


// üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
function renderOrderText(brand) {
    let orderText = document.getElementById(`order-text-${brand}`);
    if (!orderText) {
        console.error(`‚ùå –ü–æ–ª–µ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #order-text-${brand} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
        return;
    }

    if (selectedProducts[brand].length === 0) {
        orderText.value = "‚ùå –ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤!";
        return;
    }

    let total = 0;
    let orderDetails = selectedProducts[brand].map(p => {
        let itemTotal = p.quantity * p.price;
        total += itemTotal;
        return `${p.code} - ${p.name} - ${p.quantity} —à—Ç`;
    }).join('\n');

    orderText.value = `${orderDetails}\n\nüü¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total.toFixed(2)} –≥—Ä–Ω`;
}

// üî¥ –û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏–±—ñ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥—É
function clearSelection(brand) {
    selectedProducts[brand] = [];

    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
    fetch(`/selected-products/${brand}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify([])
    })
    .then(() => {
        renderProductTable(brand);  // –ü–µ—Ä–µ–º–∞–ª—é–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é —Ç–æ–≤–∞—Ä—ñ–≤
        renderOrderText(brand);     // –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    })
    .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É:', error));
}


function loadProducts(brand) {
    fetch(`/products/${brand}`)
        .then(response => response.json())
        .then(data => {
            console.log(`üì• –û—Ç—Ä–∏–º–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è ${brand}:`, data); // –î–æ–¥–∞—î–º–æ –ª–æ–≥
            allProducts[brand] = data;
            renderProductTable(brand);
        })
        .catch(error => console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ ${brand}:`, error));
}



function addNewProduct(brand) {
    let code = document.getElementById(`new-code-${brand}`).value;
    let name = document.getElementById(`new-name-${brand}`).value;
    let price = document.getElementById(`new-price-${brand}`).value;
    let category = document.getElementById(`new-category-${brand}`).value;

    if (!category) {
        category = prompt("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:");
        if (!category) return;
    }

    fetch(`/add-product/${brand}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ code, name, price, category })
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        loadProducts(brand);
        loadCategories(brand); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    })
    .catch(error => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:", error));
}



function editProduct(brand, index) {
    let product = allProducts[brand][index];
    let newCode = prompt("–ù–æ–≤–∏–π –∫–æ–¥ —Ç–æ–≤–∞—Ä—É:", product.code);
    let newName = prompt("–ù–æ–≤–∞ –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É:", product.name);
    let newPrice = prompt("–ù–æ–≤–∞ —Ü—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É:", product.price);
    let newCategory = prompt("–ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–≤–∞—Ä—É:", product.category); // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó

    fetch(`/edit-product/${brand}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            oldCode: product.code,
            newCode: newCode,
            name: newName,
            price: newPrice,
            category: newCategory
        })
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        loadProducts(brand); // –ü—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑–Ω–æ–≤—É
    })
    .catch(error => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:", error));
}


function deleteProduct(brand, index) {
    let product = allProducts[brand][index];

    if (!confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ ${product.name}?`)) return;

    fetch(`/delete-product/${brand}/${product.code}`, {
        method: "DELETE"
    })
    .then(response => response.json())
    .then(data => {
        alert(data.message);
        loadProducts(brand);
    })
    .catch(error => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:", error));
}
function filterCategory(brand) {
    let category = document.getElementById(`category-select-${brand}`).value;

    if (category === "all") {
        // –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–í—Å—ñ", –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏, –Ω–µ —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é.
        loadProducts(brand);
    } else {
        // –Ü–Ω–∞–∫—à–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –≤–∏–±—Ä–∞–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é.
        fetch(`/products/${brand}?category=${category}`)
            .then(response => response.json())
            .then(data => {
                allProducts[brand] = data;
                renderProductTable(brand);
            })
            .catch(error => console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ ${brand}:`, error));
    }
}

function loadCategories(brand) {
    fetch(`/categories/${brand}`)
        .then(response => response.json())
        .then(categories => {
            let categorySelect = document.getElementById(`category-select-${brand}`);
            let newCategorySelect = document.getElementById(`new-category-${brand}`);

            categorySelect.innerHTML = `<option value="all">–í—Å—ñ</option>`;
            newCategorySelect.innerHTML = `<option value="">-- –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é --</option>`;

            categories.forEach(category => {
                let option = `<option value="${category}">${category}</option>`;
                categorySelect.innerHTML += option;
                newCategorySelect.innerHTML += option;
            });
        })
        .catch(error => console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π ${brand}:`, error));
}
function updateQuantity(brand, index) {
    let quantityInput = document.getElementById(`qty-${brand}-${index}`);
    let quantity = parseInt(quantityInput.value);

    // –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ –∑–∞–¥–∞–Ω–∞ –∞–±–æ –º–µ–Ω—à–µ 1, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è 0
    if (isNaN(quantity) || quantity < 1) {
        quantity = 0;
    }

    let product = allProducts[brand][index];
    let existingProductIndex = selectedProducts[brand].findIndex(p => p.code === product.code);

    if (existingProductIndex !== -1) {
        selectedProducts[brand][existingProductIndex].quantity = quantity;
    }

    fetch(`/selected-products`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(selectedProducts)
    })
    .then(() => {
        renderProductTable(brand);
        renderOrderText(brand);
    })
    .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É:', error));
}
function toggleOrderText(brand) {
    let orderText = document.getElementById(`order-text-${brand}`);
    let clearButton = document.querySelector(`#clear-selection-${brand}`);
    let orderButton = document.querySelector(`#order-button-${brand}`); // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

    if (selectedProducts[brand].length > 0) {
        orderButton.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    } else {
        orderButton.style.display = 'none'; // –•–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫—É, —è–∫—â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î
    }

    if (orderText.style.display === 'none') {
        orderText.style.display = 'block';  // –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        clearButton.classList.add('clear-visible');  // –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
    } else {
        orderText.style.display = 'none';  // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        clearButton.classList.remove('clear-visible');  // –°—Ö–æ–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
    }
}


// üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
window.onload = function () {
    showTab('eleys');
    loadProducts('eleys');
    loadProducts('grunhelm');
    loadCategories('eleys');
    loadCategories('grunhelm');
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    toggleOrderText('eleys');
    toggleOrderText('grunhelm');
};


